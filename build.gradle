apply plugin: 'groovy'
apply plugin: 'maven'

defaultTasks 'clean', 'build'

version = '1.0.2-SNAPSHOT'
group = 'org.kurron'


ext.archivesBaseName = 'gradle-cobertura-plugin'
ext.isSnapshot = version.endsWith('-SNAPSHOT')
ext.publicationUrl = "http://192.168.254.81:81/artifactory/mods-release-local"
ext.publicationUsername = 'SVNBuild'
ext.publicationPassword = 'Snoopy*09'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    testCompile ('org.spockframework:spock-core:0.6-groovy-1.8') {
        exclude module: "junit-dep"
        exclude module: "groovy-all"
    }
}

    println "version = $version"
    if ( isSnapshot )
    {
        logger.quiet 'Snapshot revision detected. Configuring for local installation.'
        project.defaultTasks.add( 'install' )
    }
    else
    {
        logger.quiet 'Release revision detected. Configuring for publication.'
        uploadArchives {
            repositories {
                maven {
                    description 'Sandbox area of the repository to test publishing to'
                    url = publicationUrl
                    credentials {
                        username = publicationUsername
                        password = publicationPassword
                }
            }
        }
    }
    defaultTasks.add( 'uploadArchives' )
    }

task makeDirs(description:'make all dirs for project setup') << {
    def sources = [sourceSets.main, sourceSets.test]
    sources*.allSource*.srcDirs.flatten().each { File srcDir ->
        println "making $srcDir"
        srcDir.mkdirs()
    }
}

task sourceJar(type: Jar) {
    description = 'An archive of the source code for Maven Central'
    classifier = 'sources'
    from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
    description = 'An archive of the GroovyDocs for Maven Central'
    classifier = 'javadoc'
    from groovydoc
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.4'
}

artifacts {
    archives groovydocJar, sourceJar
}

